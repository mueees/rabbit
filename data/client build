Доступ к страницам зарегестрированных и не зарегестрированных пользователей
---------------------------------------------------------------------------

Глобальный доступ к стейтам будет ограничиваться, настройками стейта.
Доступ к страницам, который не ограниче стейтами, будет регалироваться текущим пользователем.
Тоесть каждая страница будет отображать разный контент в зависимости зарегестрирован пользователь или нет.

Это означает, что каждый компонент, котроллер итп должен легко получить доступ к текщуему пользователю, как в шаблоне,
так и в js логике.
Самый быстрый способ для шаблона, поместить данные о пользователе в $rootScope.
Самый быстрый для логики, это фабрика, которая отдает данные о пользователе.



Цель, доделать проект, до состояния можно пользоваться

Tasks:
------
8.1. добавить механизм infinity-loading ( 3 часа )
7. создание, регистрация пользователя - ПЕРВОЕ ИСПОЛЬЗОВАНИЕ РСС

8. вторая версия поиска фидов, - по прямой ссылке на фид  - тоесть добавление нового фида в систему ( 3 часа )
9. 2ая стадия front-end разработки
    - показывать посты в float-container, с возможностью переключаться клавиатурой и кнопками вперед назад
    - возможность пометить как readLater
    - возможность добавить tag
    - добавить прелоадеры для директив
    - выводить посты по тегу
    - выводить рядом с фидом, иконку, и количество непрочитанных постов
    - причесть существующий код, в том числе обзавестить тестами
    - добавить новый тип просмотра постов, magazin
    - страница органайз, для редактирование существующий категорий \ постов
    - страница пользователя, возможность сменить пароль как минимум
    - странца персональных настроек, как минимум возможность выбрать тему
    - добавить возможность показывать только непрочитанные посты, когда все посты прочитаны, показывать все прочитанные посты
    - добавить возможность просматривать все посты из определенной категории
    - добавить возможность просматривать недавно просмотренные посты


ИТОГО: 30 * 1.5 = 45 рабочий час

До отъезда осталось 6 дней * 4.5 часов/день = 27 часов (максимум)
Утром 1,5 часа
Вечером 1 часа
Работа 2 часа

Пример комментариев
https://github.com/angular/angular.js/wiki/Writing-AngularJS-Documentation

How state work
1. transitionTo(stateName)'
2. scope._rssStateEngine.transitionTo(stateName, scope)
3. get scope.rssActiveStateMap = scope.rssActiveStateMap || {}
    4. get newState from internal object
    //newState - this is object, typeof StateConfiguration
5. check if newState.isActive(scope)
    // isActive this is method from StateConfiguration
    5.1 get scope.rssActiveStateMap
    5.2 try to get stateName from scope.rssActiveStateMap
6. if false
    // we stay on scope._rssStateEngine.transitionTo method
    6.1 create promise = []
    6.2 execute newState.executeResolve(true, state), and put result to promise from 6.1
        // we stay on StateConfiguration object
        6.2.1 create defer
        6.2.2 check if exist _resolveFn (array)
            // _resolveFn - this is array, with optResolveFn method from options
        6.2.3 after executing all methods from _resolveFn array
        6.2.4 execute _executeHandlers(activate, scope)
            // activate - this is true from point 6.2
        6.2.5 execute all methods from _handlerFn array
            // _handlerFn by default contain methods, where we determine our state

    6.2.1 create def object ( in transitionTo method )
    6.3 when promise resoved from 6.1

    6.4 execute _activeState(newState, scope, oldState);
        // _activeState belong to rssStateEngine
        6.4.1 execute newState.activeState(scope);
            //activeState this is method from StateConfiguration
            6.4.1.1 execute isActive(scope) check is this state active, point 5
            6.4.1.2 add class for element
            6.4.1.3 execute _setActive(scope, true)
                6.4.1.3.1 set scope.rssActiveStateMap[stateName] = true;
                    //true - this is second parameter from 6.4.1.3 point
        6.4.2 execute onStateTransitionFn(scope, state.getFullyQualifiedName(), oldStateName);
            //onStateTransitionFn - this is method, that we pass when create RssStateEngine instance
            6.4.2.1 execute scope.rssOnStateChanged
                //by default rssOnStateChanged is noop
    6.5 resolve defer from 6.2.1 point
    6.6 return def.promise
        // this is transitionTo return